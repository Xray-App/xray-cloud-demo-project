<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.6.4 on darwin)" generated="20191031 14:33:23.246" rpa="false">
<suite id="s1" name="Robot Demo" source="/Users/brunoconde/Projects/robot_demo">
<suite id="s1-s1" name="Data Driven" source="/Users/brunoconde/Projects/robot_demo/data_driven.robot">
<test id="s1-s1-t1" name="Addition">
<kw name="Calculate">
<arguments>
<arg>12 + 2 + 2</arg>
<arg>16</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.286" endtime="20191031 14:33:23.286"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.286" endtime="20191031 14:33:23.287"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.286" endtime="20191031 14:33:23.287"></status>
</kw>
<kw name="Calculate">
<arguments>
<arg>2 + -3</arg>
<arg>-1</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.287" endtime="20191031 14:33:23.288"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.288" endtime="20191031 14:33:23.288"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.287" endtime="20191031 14:33:23.288"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.285" endtime="20191031 14:33:23.288" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Subtraction">
<kw name="Calculate">
<arguments>
<arg>12 - 2 - 2</arg>
<arg>8</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.289" endtime="20191031 14:33:23.289"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.290" endtime="20191031 14:33:23.290"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.289" endtime="20191031 14:33:23.290"></status>
</kw>
<kw name="Calculate">
<arguments>
<arg>2 - -3</arg>
<arg>5</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.290" endtime="20191031 14:33:23.302"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.302" endtime="20191031 14:33:23.303"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.290" endtime="20191031 14:33:23.303"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.288" endtime="20191031 14:33:23.303" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Multiplication">
<kw name="Calculate">
<arguments>
<arg>12 * 2 * 2</arg>
<arg>48</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.304" endtime="20191031 14:33:23.304"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.304" endtime="20191031 14:33:23.304"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.303" endtime="20191031 14:33:23.304"></status>
</kw>
<kw name="Calculate">
<arguments>
<arg>2 * -3</arg>
<arg>-6</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.305" endtime="20191031 14:33:23.305"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.305" endtime="20191031 14:33:23.305"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.304" endtime="20191031 14:33:23.305"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.303" endtime="20191031 14:33:23.306" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Division">
<kw name="Calculate">
<arguments>
<arg>12 / 2 / 2</arg>
<arg>3</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.306" endtime="20191031 14:33:23.307"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.307" endtime="20191031 14:33:23.307"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.306" endtime="20191031 14:33:23.307"></status>
</kw>
<kw name="Calculate">
<arguments>
<arg>2 / -3</arg>
<arg>-1</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.308" endtime="20191031 14:33:23.308"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.308" endtime="20191031 14:33:23.308"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.307" endtime="20191031 14:33:23.308"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.306" endtime="20191031 14:33:23.308" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Failing">
<kw name="Calculate">
<arguments>
<arg>1 + 1</arg>
<arg>3</arg>
</arguments>
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.310" endtime="20191031 14:33:23.310"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20191031 14:33:23.311" level="FAIL">2 != 3</msg>
<status status="FAIL" starttime="20191031 14:33:23.310" endtime="20191031 14:33:23.311"></status>
</kw>
<status status="FAIL" starttime="20191031 14:33:23.309" endtime="20191031 14:33:23.311"></status>
</kw>
<status status="FAIL" starttime="20191031 14:33:23.309" endtime="20191031 14:33:23.312" critical="yes">2 != 3</status>
</test>
<test id="s1-s1-t6" name="Calculation error">
<kw name="Calculation should fail">
<arguments>
<arg>kekkonen</arg>
<arg>Invalid button 'k'.</arg>
</arguments>
<kw name="Should Cause Error" library="CalculatorLibrary">
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<assign>
<var>${error}</var>
</assign>
<msg timestamp="20191031 14:33:23.313" level="INFO">${error} = Invalid button 'k'.</msg>
<status status="PASS" starttime="20191031 14:33:23.313" endtime="20191031 14:33:23.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.313" endtime="20191031 14:33:23.313"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.312" endtime="20191031 14:33:23.314"></status>
</kw>
<kw name="Calculation should fail">
<arguments>
<arg>${EMPTY}</arg>
<arg>Invalid expression.</arg>
</arguments>
<kw name="Should Cause Error" library="CalculatorLibrary">
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<assign>
<var>${error}</var>
</assign>
<msg timestamp="20191031 14:33:23.315" level="INFO">${error} = Invalid expression.</msg>
<status status="PASS" starttime="20191031 14:33:23.314" endtime="20191031 14:33:23.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.315" endtime="20191031 14:33:23.315"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.314" endtime="20191031 14:33:23.315"></status>
</kw>
<kw name="Calculation should fail">
<arguments>
<arg>1 / 0</arg>
<arg>Division by zero.</arg>
</arguments>
<kw name="Should Cause Error" library="CalculatorLibrary">
<doc>Verifies that calculating the given ``expression`` causes an error.</doc>
<arguments>
<arg>C${expression}=</arg>
</arguments>
<assign>
<var>${error}</var>
</assign>
<msg timestamp="20191031 14:33:23.316" level="INFO">${error} = Division by zero.</msg>
<status status="PASS" starttime="20191031 14:33:23.316" endtime="20191031 14:33:23.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${error}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.316" endtime="20191031 14:33:23.316"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.315" endtime="20191031 14:33:23.316"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.312" endtime="20191031 14:33:23.316" critical="yes"></status>
</test>
<doc>Example test cases using the data-driven testing approach.

The _data-driven_ style works well when you need to repeat
the same workflow multiple times.

Tests use ``Calculate`` keyword created in this file, that in
turn uses keywords in ``CalculatorLibrary.py``. An exception
is the last test that has a custom _template keyword_.

Notice that one of these tests fails on purpose to show how
failures look like.</doc>
<status status="FAIL" starttime="20191031 14:33:23.274" endtime="20191031 14:33:23.317"></status>
</suite>
<suite id="s1-s2" name="Gherkin" source="/Users/brunoconde/Projects/robot_demo/gherkin.robot">
<test id="s1-s2-t1" name="Addition">
<kw name="Given calculator has been cleared">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>C</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.323" endtime="20191031 14:33:23.323"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.323" endtime="20191031 14:33:23.323"></status>
</kw>
<kw name="When user types &quot;1 + 1&quot;">
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>${expression}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.324" endtime="20191031 14:33:23.324"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.324" endtime="20191031 14:33:23.324"></status>
</kw>
<kw name="and user pushes equals">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.325" endtime="20191031 14:33:23.325"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.324" endtime="20191031 14:33:23.326"></status>
</kw>
<kw name="Then result is &quot;2&quot;">
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.326" endtime="20191031 14:33:23.327"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.326" endtime="20191031 14:33:23.327"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.322" endtime="20191031 14:33:23.327" critical="yes"></status>
</test>
<doc>Example test case using the gherkin syntax.

This test has a workflow similar to the keyword-driven
examples. The difference is that the keywords use higher
abstraction level and their arguments are embedded into
the keyword names.

This kind of _gherkin_ syntax has been made popular by
[http://cukes.info|Cucumber]. It works well especially when
tests act as examples that need to be easily understood also
by the business people.</doc>
<status status="PASS" starttime="20191031 14:33:23.318" endtime="20191031 14:33:23.327"></status>
</suite>
<suite id="s1-s3" name="Keyword Driven" source="/Users/brunoconde/Projects/robot_demo/keyword_driven.robot">
<test id="s1-s3-t1" name="Push button">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.331" endtime="20191031 14:33:23.331"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.331" endtime="20191031 14:33:23.331"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.330" endtime="20191031 14:33:23.332" critical="yes"></status>
</test>
<test id="s1-s3-t2" name="Push multiple buttons">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.332" endtime="20191031 14:33:23.332"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.332" endtime="20191031 14:33:23.333"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>12</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.333" endtime="20191031 14:33:23.333"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.332" endtime="20191031 14:33:23.333" critical="yes"></status>
</test>
<test id="s1-s3-t3" name="Simple calculation">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.334" endtime="20191031 14:33:23.334"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>+</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.334" endtime="20191031 14:33:23.334"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.334" endtime="20191031 14:33:23.334"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>=</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.334" endtime="20191031 14:33:23.335"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>3</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.335" endtime="20191031 14:33:23.335"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.333" endtime="20191031 14:33:23.335" critical="yes"></status>
</test>
<test id="s1-s3-t4" name="Longer calculation">
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.</doc>
<arguments>
<arg>5 + 4 - 3 * 2 / 1 =</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.336" endtime="20191031 14:33:23.336"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>3</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.336" endtime="20191031 14:33:23.336"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.335" endtime="20191031 14:33:23.337" critical="yes"></status>
</test>
<test id="s1-s3-t5" name="Clear">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.337" endtime="20191031 14:33:23.337"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.</doc>
<arguments>
<arg>C</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.337" endtime="20191031 14:33:23.338"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20191031 14:33:23.338" endtime="20191031 14:33:23.338"></status>
</kw>
<status status="PASS" starttime="20191031 14:33:23.337" endtime="20191031 14:33:23.338" critical="yes"></status>
</test>
<doc>Example test cases using the keyword-driven testing approach.

All tests contain a workflow constructed from keywords in
``CalculatorLibrary.py``. Creating new tests or editing
existing is easy even for people without programming skills.

The _keyword-driven_ appoach works well for normal test
automation, but the _gherkin_ style might be even better
if also business people need to understand tests. If the
same workflow needs to repeated multiple times, it is best
to use to the _data-driven_ approach.</doc>
<status status="PASS" starttime="20191031 14:33:23.328" endtime="20191031 14:33:23.339"></status>
</suite>
<status status="FAIL" starttime="20191031 14:33:23.247" endtime="20191031 14:33:23.340"></status>
</suite>
<statistics>
<total>
<stat pass="11" fail="1">Critical Tests</stat>
<stat pass="11" fail="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="11" fail="1" id="s1" name="Robot Demo">Robot Demo</stat>
<stat pass="5" fail="1" id="s1-s1" name="Data Driven">Robot Demo.Data Driven</stat>
<stat pass="1" fail="0" id="s1-s2" name="Gherkin">Robot Demo.Gherkin</stat>
<stat pass="5" fail="0" id="s1-s3" name="Keyword Driven">Robot Demo.Keyword Driven</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
